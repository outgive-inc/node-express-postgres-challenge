[{"/app/src/App.js":"1","/app/src/index.js":"2","/app/src/reportWebVitals.js":"3","/app/src/components/TasksWidget/tasks.js":"4","/app/src/components/inputs/searchInput/searchInput.js":"5","/app/src/contexts/GlobalContext.js":"6"},{"size":545,"mtime":1623389514421,"results":"7","hashOfConfig":"8"},{"size":494,"mtime":1623357641628,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1623357641629,"results":"10","hashOfConfig":"8"},{"size":13574,"mtime":1623427530856,"results":"11","hashOfConfig":"8"},{"size":2009,"mtime":1623367250190,"results":"12","hashOfConfig":"8"},{"size":112,"mtime":1623386559254,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"dw1fqx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/app/src/App.js",[],["28","29"],"/app/src/index.js",[],"/app/src/reportWebVitals.js",[],"/app/src/components/TasksWidget/tasks.js",["30"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { GlobalContext } from '../../contexts/GlobalContext';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SearchInput from '../inputs/searchInput/searchInput';\r\nimport { IconButton, TextField, Tooltip, Button, Checkbox, Toolbar, Accordion, AccordionDetails, AccordionSummary, Typography } from '@material-ui/core';\r\nimport AddTwoToneIcon from '@material-ui/icons/AddTwoTone';\r\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\r\nimport EditTwoToneIcon from '@material-ui/icons/EditTwoTone';\r\nimport SaveTwoToneIcon from '@material-ui/icons/SaveTwoTone';\r\nimport InfoTwoToneIcon from '@material-ui/icons/InfoTwoTone';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    noTasksBox: {\r\n        padding: \"1em\",\r\n        textAlign: \"center\",\r\n        color: \"white\",\r\n        marginTop: \"8em\"\r\n    },\r\n    noTaskIcon: {\r\n        color: \"orange\",\r\n        fontSize: \"7em\"\r\n    },\r\n    tasksBox: {\r\n        width: \"60%\",\r\n        height: \"70vh\",\r\n        margin: \"0 auto\",\r\n        boxShadow: theme.shadows[5],\r\n        minWidth: \"500px\"\r\n    },\r\n    tasksBoxHeader: {\r\n        background: \"#101940\",\r\n        padding: \"1em\",\r\n        height: \"2em\",\r\n        minHeight: \"0px\",\r\n    },\r\n    tasksBoxHeaderText: {\r\n        marginTop: \"0.6em\",\r\n        maxWidth: \"525px\",\r\n        [theme.breakpoints.only('md')]: {\r\n            maxWidth: \"350px\",\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxWidth: \"150px\",\r\n        },\r\n    },\r\n    tasksBoxBody: {\r\n        padding: \"1em\",\r\n        background: \"#101940\",\r\n        height: \"100%\",\r\n        overflowY: \"auto\"\r\n    },\r\n    createButton: {\r\n        background: \"green\",\r\n        color: \"white\",\r\n        \"&:hover\": {\r\n            background: \"green\",\r\n        },\r\n        padding: \"0.5em 1em 0.5em 1em\",\r\n        boxShadow: theme.shadows[3],\r\n    },\r\n    saveButton: {\r\n        background: \"#1e88e5\",\r\n        color: \"white\",\r\n        \"&:hover\": {\r\n            background: \"#1e88e5\",\r\n        },\r\n        marginRight: \"10px\",\r\n        padding: \"0.2em 1em 0.2em 1em\",\r\n        boxShadow: theme.shadows[3],\r\n    },\r\n    deleteButton: {\r\n        background: \"red\",\r\n        color: \"white\",\r\n        padding: \"8px\",\r\n        boxShadow: theme.shadows[3],\r\n        \"&:hover\": {\r\n            background: \"red\",\r\n        },\r\n    },\r\n    editButton: {\r\n        background: \"#1e88e5\",\r\n        color: \"white\",\r\n        padding: \"8px\",\r\n        boxShadow: theme.shadows[3],\r\n        marginRight: \"10px\",\r\n        \"&:hover\": {\r\n            background: \"#1e88e5\",\r\n        },\r\n    },\r\n    completedBox: {\r\n        color: \"green\",\r\n        '&$checked': {\r\n            color: \"green\",\r\n        },\r\n    },\r\n    editTitleField: {\r\n        marginTop: \"0.4em\",\r\n        width: \"calc(100% - 15em)\",\r\n        minWidth: \"10em\"\r\n    },\r\n    editDetailsField: {\r\n        width: \"100%\"\r\n    }\r\n}));\r\n\r\nexport default function Tasks() {\r\n    const classes = useStyles()\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    //Search key for finding a certain task\r\n    const [searchKey, setSearchKey] = useState(\"\");\r\n\r\n    //All tasks\r\n    const [tasks, setTasks] = useState([])\r\n\r\n    //Get API endpoint from global context\r\n    const { apiEndpoint } = useContext(GlobalContext);\r\n\r\n    //Fetch all tasks when component is loaded\r\n    useEffect(() => {\r\n\r\n        getAllTasks().then((tasks) => {\r\n            setTasks(tasks)\r\n            setLoaded(true)\r\n        }).catch((err) => { console.log(err) })\r\n\r\n    }, [])\r\n\r\n    async function getAllTasks() {\r\n        let response = await fetch(`${apiEndpoint}/v1/tasks/getall`, {\r\n            method: 'GET',\r\n            headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n        });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(\"Failed getting all tasks\");\r\n        }\r\n\r\n        const res = await response.json();\r\n\r\n        return res\r\n    }\r\n\r\n    function expandTask(id) {\r\n\r\n        const tasksCopy = [...tasks]\r\n\r\n        const task = tasksCopy.find(t => t.id === id)\r\n\r\n        if (task.editMode) {\r\n            task.expanded = true;\r\n        } else {\r\n            task.expanded = !task.expanded;\r\n        }\r\n\r\n        setTasks(tasksCopy)\r\n    }\r\n\r\n    async function addTask() {\r\n\r\n        let response = await fetch(`${apiEndpoint}/v1/tasks/create`, {\r\n            method: 'POST',\r\n            headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ title: `Template ${tasks.length + 1}` })\r\n        });\r\n\r\n        const res = await response.json();\r\n\r\n        if (response.status !== 200) {\r\n            toast.error(res.errorMessage)\r\n            return\r\n        }\r\n\r\n        const tasksCopy = [...tasks]\r\n\r\n        tasksCopy.unshift({\r\n            id: res.id,\r\n            title: res.title,\r\n            details: res.details,\r\n            completed: res.completed,\r\n            editMode: true,\r\n            expanded: true\r\n        })\r\n\r\n        setTasks(tasksCopy)\r\n    }\r\n\r\n    function editTask(event, id) {\r\n        event.stopPropagation();\r\n\r\n        const tasksCopy = [...tasks]\r\n\r\n        const task = tasksCopy.find(t => t.id === id)\r\n\r\n        task.editMode = true;\r\n        task.expanded = true;\r\n\r\n        setTasks(tasksCopy)\r\n    }\r\n\r\n    async function saveChanges(event, id) {\r\n        event.stopPropagation();\r\n\r\n        const tasksCopy = [...tasks]\r\n\r\n        const task = tasksCopy.find(t => t.id === id);\r\n\r\n        if (task.title.length > 100) {\r\n            toast.error(\"Title cannot exceed 100 characters\")\r\n            return\r\n        } else if (task.title.length <= 0) {\r\n            toast.error(\"Title cannot be empty\")\r\n            return\r\n        }\r\n\r\n        let response = await fetch(`${apiEndpoint}/v1/tasks/update`, {\r\n            method: 'PUT',\r\n            headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(task)\r\n        });\r\n\r\n        if (response.status !== 200) {\r\n            const res = await response.json();\r\n\r\n            toast.error(res.errorMessage)\r\n            return\r\n        }\r\n\r\n        task.editMode = false;\r\n\r\n        setTasks(tasksCopy)\r\n    }\r\n\r\n    async function deleteTask(event, id) {\r\n        event.stopPropagation();\r\n\r\n        let response = await fetch(`${apiEndpoint}/v1/tasks/delete/${id}`, {\r\n            method: 'DELETE',\r\n            headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }\r\n        });\r\n\r\n        if (response.status !== 200) {\r\n            const res = await response.json();\r\n\r\n            toast.error(res.errorMessage)\r\n            return\r\n        }\r\n\r\n        let tasksCopy = [...tasks]\r\n\r\n        tasksCopy = tasksCopy.filter(t => t.id !== id);\r\n\r\n        setTasks(tasksCopy)\r\n    }\r\n\r\n    async function updateTaskStatus(event, id) {\r\n        event.stopPropagation();\r\n\r\n        const tasksCopy = [...tasks]\r\n\r\n        const task = tasksCopy.find(t => t.id === id)\r\n\r\n        task.completed = !task.completed;\r\n\r\n        let response = await fetch(`${apiEndpoint}/v1/tasks/update`, {\r\n            method: 'PUT',\r\n            headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(task)\r\n        });\r\n\r\n        if (response.status !== 200) {\r\n            const res = await response.json();\r\n\r\n            toast.error(res.errorMesssage)\r\n            return\r\n        }\r\n\r\n        setTasks(tasksCopy)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.tasksBox}>\r\n            {tasks.length > 0 ?\r\n                <Toolbar className={classes.tasksBoxHeader}>\r\n                    <SearchInput onKeyUp={(words) => { setSearchKey(words); }} />\r\n                    <div className={classes.grow} />\r\n                    <Button onClick={addTask} endIcon={<AddTwoToneIcon />} className={classes.createButton}>\r\n                        Add Task\r\n                    </Button>\r\n                </Toolbar>\r\n                :\r\n                null\r\n            }\r\n            <div className={classes.tasksBoxBody}>\r\n                {tasks.length === 0 && loaded ?\r\n                    <div className={classes.noTasksBox}>\r\n                        <InfoTwoToneIcon className={classes.noTaskIcon} />\r\n                        <h2>No Tasks Found</h2>\r\n                        <br />\r\n                        <Button onClick={addTask} endIcon={<AddTwoToneIcon />} className={classes.createButton}>\r\n                            Add Task\r\n                        </Button>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        {tasks.map((task) => {\r\n                            if (searchKey !== \"\" && !task.title.toUpperCase().includes(searchKey.toUpperCase())) {\r\n                                return null\r\n                            }\r\n\r\n\r\n                            return (\r\n                                <Accordion\r\n                                    expanded={task.expanded ?? false}\r\n                                    key={task.id}\r\n                                >\r\n                                    <AccordionSummary\r\n                                        onClick={() => { expandTask(task.id) }}\r\n                                    >\r\n                                        <Checkbox\r\n                                            onClick={(e) => { updateTaskStatus(e, task.id) }}\r\n                                            className={classes.completedBox}\r\n                                            color=\"default\"\r\n                                            checked={task.completed}\r\n                                        />\r\n                                        {task.editMode ?\r\n                                            <TextField\r\n                                                onKeyUp={(e) => { task.title = e.target.value; }}\r\n                                                defaultValue={task.title}\r\n                                                onClick={(e) => { e.stopPropagation() }}\r\n                                                className={classes.editTitleField}\r\n                                            />\r\n                                            :\r\n                                            <Typography noWrap className={classes.tasksBoxHeaderText}>{task.title}</Typography>\r\n                                        }\r\n                                        <div className={classes.grow} />\r\n                                        {task.editMode ?\r\n                                            <div>\r\n                                                <Button onClick={(e) => { saveChanges(e, task.id) }} endIcon={<SaveTwoToneIcon />} className={classes.saveButton}>\r\n                                                    Save\r\n                                                </Button>\r\n                                                <Tooltip title=\"Delete Task\">\r\n                                                    <IconButton onClick={(e) => { deleteTask(e, task.id); }} className={classes.deleteButton}>\r\n                                                        <DeleteTwoToneIcon />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </div>\r\n\r\n                                            :\r\n                                            <div>\r\n                                                <Tooltip title=\"Edit Task\">\r\n                                                    <IconButton onClick={(e) => { editTask(e, task.id); }} className={classes.editButton}>\r\n                                                        <EditTwoToneIcon />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                                <Tooltip title=\"Delete Task\">\r\n                                                    <IconButton onClick={(e) => { deleteTask(e, task.id); }} className={classes.deleteButton}>\r\n                                                        <DeleteTwoToneIcon />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </div>\r\n                                        }\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails>\r\n                                        {task.editMode ?\r\n                                            <TextField\r\n                                                onKeyUp={(e) => { task.details = e.target.value; }}\r\n                                                defaultValue={task.details}\r\n                                                className={classes.editDetailsField}\r\n                                                multiline\r\n                                            />\r\n                                            :\r\n                                            <Typography>{task.details}</Typography>\r\n                                        }\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","/app/src/components/inputs/searchInput/searchInput.js",[],"/app/src/contexts/GlobalContext.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":132,"column":8,"nodeType":"37","endLine":132,"endColumn":10,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllTasks'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [getAllTasks]",{"range":"44","text":"45"},[3641,3643],"[getAllTasks]"]